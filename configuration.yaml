
################
## MAIN SETUP
################

# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

homeassistant:
  # Name of where Home Assistant is running
  name: !secret ha_name 
  # Temperature C for Celcius, F for Farenheit
  temperature_unit: F
  # Time Zone - pick from: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: America/New_York
  unit_system: imperial
  country: US

  # Location information
  latitude: !secret latitude_home
  longitude: !secret longitude_home
  elevation: !secret elevation_home

  # URL information
  internal_url: !secret internal_url

# LOGGING LEVEL
logger:
  default: info

# RECORDER - home-assistant_v2.db
recorder:
  purge_keep_days: 8
  include:
    entity_globs:
      - sensor.flume_*

# Text to speech
tts:
  - platform: google_translate

# Lovelace UI should be in YAML/manual mode
lovelace:
  mode: yaml

# Frontend and Themes
frontend:
  themes: !include_dir_merge_named themes/

# Enable ffmpeg and streams for video streams
ffmpeg:

stream:


################
## INPUT SELECT
################
input_select:
  which_tv: #drop down select list for choosing which TV to control with the remote
    name: Which TV
    options:
      - "media_player.family_room_ump"
      - "media_player.master_bedroom_ump"
      - "media_player.game_room_tv"
      - "media_player.home_theater_ump"
    initial: "media_player.family_room_ump"
    icon: mdi:television

################
## INPUT BOOLEAN
################
#input_boolean:
#  home_theater_av_status:
#    name: Status of Home Theater AV
#    initial: false

input_boolean:
  camera_notify_mobile:
    name: Camera Mobile Notifications
    initial: true
    icon: mdi:cellphone-wireless
  camera_notify_screen:
    name: Camera Screen Notifications
    initial: true
    icon: mdi:television
  camera_all_notifications:
    name: Camera All Notifications
    initial: true
    icon: mdi:notification-clear-all
  notify_voice:
    name: Voice Notifications
    initial: true
    icon: mdi:account-voice
  notify_outdoor_gates:
    name: Outdoor Gates Notifications
    initial: true
    icon: mdi:gate-alert

#input_button:
input_button:
  dinner_announcement:
    name: Dinner Announcement
    icon: mdi:account-voice
  lunch_announcement:
    name: Lunch Announcement
    icon: mdi:account-voice
  breakfast_announcement:
    name: Breakfast Announcement
    icon: mdi:account-voice
  camera_driveway_family_room_tv:
    name: Driveway Camera on Family Room TV
    icon: mdi:cctv
  camera_driveway_master_bedroom_tv:
    name: Driveway Camera on Master Bedroom TV
    icon: mdi:cctv
  camera_front_door_family_room_tv:
    name: Front Door Camera on Family Room TV
    icon: mdi:cctv
  camera_front_door_master_bedroom_tv:
    name: Front Door Camera on Master Bedroom TV
    icon: mdi:cctv


#####################
## INTEGRATIONS BELOW
#####################

# Lutron
lutron:
  host: !secret lutron_host
  username: !secret lutron_username
  password: !secret lutron_password
               
#Emulated Roku
emulated_roku:
  servers:
    - name: HA ROKU
      listen_port: 8060
      

######################
## NOTIFY GROUPS BELOW
######################

notify:
  - name: family_all_mobile
    platform: group
    services:
      - service: mobile_app_rma
      - service: mobile_app_spa


###########
## SWITCHES
###########
switch:
  # Sony Projector in Home Theater
  - platform: sony_projector
    host: !secret sony_projector_host
    name: "Sony Projector"
  # Denon Receiver in Home Theater
  - platform: telnet
    switches:
      denon_x8500h_receiver:
        resource: !secret denon_x8500h_host
        port: 23
        command_on: "ZMON"
        command_off: "ZMOFF"
        command_state: "ZM?"
        value_template: '{{ value == "ZMON" }}'
        timeout: 0.9
      denon_x8500h_receiver_mute:
        resource: !secret denon_x8500h_host
        port: 23
        command_on: "MUON"
        command_off: "MUOFF"
        command_state: "MU?"
        value_template: '{{ value == "MUON" }}'
        timeout: 0.9
  # Apple TV in Home Theater
  - platform: template
    switches:
      apple_tv:
        value_template: "{{ is_state('media_player.apple_tv','playing') }}"
        turn_on:
          service: remote.send_command
          data:
            entity_id: remote.apple_tv
            command: menu
        turn_off:
          service: remote.send_command
          data:
            entity_id: remote.apple_tv
            command: suspend
  # Denon Receiver in Family Room
  - platform: telnet
    switches:
      denon_s750h_receiver:
        resource: !secret denon_s750h_host
        port: 23
        command_on: "ZMON"
        command_off: "ZMOFF"
        command_state: "ZM?"
        value_template: '{{ value == "ZMON" }}'
        timeout: 0.9
  # Kitchen Monoprice TV Audio On and Off
  - platform: template
    switches:
      kitchen_tv_audio:
        value_template: "{{ is_state('media_player.monoprice_kitchen','on') }}"
        turn_on:
          service: scene.turn_on
          data:
            entity_id: scene.kitchen_tv_audio_on
        turn_off:
          service: scene.turn_on
          data:
            entity_id: scene.kitchen_speakers_off
  # Kitchen Monoprice Sonos On and Off
  - platform: template
    switches:
      kitchen_sonos:
        value_template: "{{ is_state('media_player.monoprice_kitchen','on') }}"
        turn_on:
          service: scene.turn_on
          data:
            entity_id: scene.kitchen_sonos_on
        turn_off:
          service: scene.turn_on
          data:
            entity_id: scene.kitchen_speakers_off
  # Deck Monoprice TV Audio On and Off
  - platform: template
    switches:
      deck_tv_audio:
        value_template: "{{ is_state('media_player.monoprice_kitchen','on') }}"
        turn_on:
          service: scene.turn_on
          data:
            entity_id: scene.deck_tv_audio_on
        turn_off:
          service: scene.turn_on
          data:
            entity_id: scene.deck_speakers_off
  # Deck Monoprice Sonos On and Off
  - platform: template
    switches:
      deck_sonos:
        value_template: "{{ is_state('media_player.monoprice_kitchen','on') }}"
        turn_on:
          service: scene.turn_on
          data:
            entity_id: scene.deck_sonos_on
        turn_off:
          service: scene.turn_on
          data:
            entity_id: scene.deck_speakers_off
  # Kitchen Monoprice TV Audio Mute and Unmute
  - platform: template
    switches:
      kitchen_tv_audio_mute:
        value_template: "{{ is_state_attr('media_player.monoprice_kitchen','is_volume_muted',true) }}"
        turn_on:
          service: scene.turn_on
          data:
            entity_id: scene.kitchen_tv_audio_mute
        turn_off:
          service: scene.turn_on
          data:
            entity_id: scene.kitchen_tv_audio_unmute
  # Family Room and Kitchen All Audio Mute Switch
  - platform: template
    switches:
      family_room_kitchen_audio_mute:
        value_template: "{{ (is_state_attr('media_player.denon_avr_s750h','is_volume_muted',true) and is_state_attr('media_player.monoprice_kitchen','is_volume_muted',true)) }}"
        turn_on:
          service: scene.turn_on
          data:
            entity_id: scene.family_room_kitchen_audio_mute
        turn_off:
          service: scene.turn_on
          data:
            entity_id: >
              # Unmute differently if kitchen speakers are off
              {% if is_state('media_player.monoprice_kitchen','on') %}
                scene.family_room_kitchen_audio_unmute
              {% else %}
                scene.family_room_audio_unmute
              {% endif %}

###############
## INPUT NUMBER
###############
input_number:
  # Denon x8500h Volume for Home Theater
  denon_x8500h_volume:
    name: Denon x8500h Volume
    initial: 65
    min: 10
    max: 80
    step: 1
    mode: slider
    icon: mdi:volume-low

##########
## SENSORS
##########
sensor:
  # Badnest for NEST Thermostat Integration
  #- platform: badnest
  # Sensors to Produce rounded temperature (vs. long decimal) for NEST thermostat
  - platform: template
    sensors:
      family_room_temperature_round:
        friendly_name: "Family Room Temperature Round"
        unit_of_measurement: '째F'
        value_template: "{{ states('sensor.family_room_temperature') | round|int }}"
      master_bedroom_temperature_round:
        friendly_name: "Master Bedroom Temperature Round"           
        unit_of_measurement: '째F'         
        value_template: "{{ states('sensor.master_bedroom_temperature') | round|int }}"
      kids_room_temperature_round:
        friendly_name: "Kids Room Temperature Round"           
        unit_of_measurement: '째F'         
        value_template: "{{ states('sensor.kids_room_temperature') | round|int }}"  
      basement_temperature_round:
        friendly_name: "Basement Temperature Round"           
        unit_of_measurement: '째F'         
        value_template: "{{ states('sensor.basement_temperature') | round|int }}"  
  # Date/Time
  - platform: time_date
    display_options:
      - 'date'
      - 'time'
      - 'date_time'
      - 'time_date'
      - 'date_time_iso'
  - platform: template
    sensors:
      simple_date:
        friendly_name: "Simple Date"
        value_template: "{{ as_timestamp(now()) | timestamp_custom('%a %b %e') }}"
  - platform: template
    sensors:
      simple_time:
        friendly_name: "Simple Time"
        value_template: "{{ as_timestamp(now()) | timestamp_custom('%I:%M %p') }}"

#################
## MEDIA PLAYERS
#################

media_player:

  # MASTER BEDROOM Universal Media Player (ump)
  - platform: universal
    name: Master Bedroom UMP
    children:
      # sony tv (first child's state is used)
      - media_player.master_bedroom_tv
      # sonos
      - media_player.sonos_master_bedroom
    commands:
      turn_on:
        service: media_player.turn_on
        data:
          entity_id: media_player.master_bedroom_tv
      turn_off:
        service: media_player.turn_off
        data:
          entity_id: media_player.master_bedroom_tv
      volume_up:
        service: media_player.volume_up
        data:
          entity_id: media_player.sonos_master_bedroom
      volume_down:
        service: media_player.volume_down
        data:
          entity_id: media_player.sonos_master_bedroom
      volume_mute:
        service: media_player.volume_mute
        data_template:
          entity_id: media_player.sonos_master_bedroom
          is_volume_muted: '{{ is_volume_muted }}'
      volume_set:
        service: media_player.volume_set
        data_template:
          entity_id: media_player.sonos_master_bedroom
          volume_level: '{{ volume_level }}'
      select_source:
        service: media_player.select_source
        data_template:
          entity_id: media_player.master_bedroom_tv
          source: '{{ source }}'
  
    attributes:
      state: media_player.master_bedroom_tv
      is_volume_muted: media_player.sonos_master_bedroom|is_volume_muted
      volume_level: media_player.sonos_master_bedroom|volume_level
      source: media_player.master_bedroom_tv|source
      source_list: media_player.master_bedroom_tv|source_list

  # FAMILY ROOM Universal Media Player
  - platform: universal
    name: Family Room UMP
    children:
      # sony tv (first child's state is used)
      - media_player.family_room_tv
      - media_player.denon_avr_s750h
    # Report the state of the UMP based on a template
    state_template: >
      {% if is_state('media_player.family_room_tv','playing') and is_state('media_player.denon_avr_s750h','on') %}
      on
      {% else %}
      off
      {% endif %}
    commands:
      turn_on:
        service: scene.turn_on
        data:
          entity_id: scene.family_room_audio_video_on
      turn_off:
        service: scene.turn_on
        data:
          entity_id: scene.family_room_kitchen_audio_video_off
      volume_up:
        service: media_player.volume_up
        data:
          entity_id: media_player.denon_avr_s750h
      volume_down:
        service: media_player.volume_down
        data:
          entity_id: media_player.denon_avr_s750h
      volume_mute:
        service: switch.toggle
        data_template:
          entity_id: switch.family_room_kitchen_audio_mute
          #is_volume_muted: '{{ is_volume_muted }}'
      volume_set:
        service: media_player.volume_set
        data_template:
          entity_id: media_player.denon_avr_s750h
          volume_level: '{{ volume_level }}'
      select_source:
        service: media_player.select_source
        data_template:
          entity_id: media_player.denon_avr_s750h
          source: '{{ source }}'
  
    attributes:
      state: media_player.family_room_tv
      is_volume_muted: media_player.denon_avr_s750h|is_volume_muted
      volume_level: media_player.denon_avr_s750h|volume_level
      source: media_player.denon_avr_s750h|source
      source_list: media_player.denon_avr_s750h|source_list
  
  # HOME THEATER Universal Media Player
  - platform: universal
    name: Home Theater UMP
    children:
      # Denon Home Theater Receiver 
      - media_player.denon_avr_x8500h
    # Report the state of the UMP based on a template
    state_template: >
      {% if is_state('media_player.denon_avr_x8500h','playing') and is_state('switch.sony_projector','on') %}
      on
      {% else %}
      off
      {% endif %}
    commands:
      turn_on:
        service: script.turn_on
        data:
          entity_id: script.theater_audio_video_on
      turn_off:
        service: script.turn_on
        data:
          entity_id: script.theater_audio_video_off
      volume_up:
        service: media_player.volume_up
        data:
          entity_id: media_player.denon_avr_x8500h
      volume_down:
        service: media_player.volume_down
        data:
          entity_id: media_player.denon_avr_x8500h
      volume_mute:
        service: media_player.volume_mute
        data_template:
          entity_id: media_player.denon_avr_x8500h
          is_volume_muted: '{{ is_volume_muted }}'
      volume_set:
        service: media_player.volume_set
        data_template:
          entity_id: media_player.denon_avr_x8500h
          volume_level: '{{ volume_level }}'
      select_source:
        service: media_player.select_source
        data_template:
          entity_id: media_player.denon_avr_x8500h
          source: '{{ source }}'

    attributes:
      is_volume_muted: media_player.denon_avr_x8500h|is_volume_muted
      volume_level: media_player.denon_avr_x8500h|volume_level
      source: media_player.denon_avr_x8500h|source
      source_list: media_player.denon_avr_x8500h|source_list

#################
## CLOUD
#################
cloud:
  alexa:
    filter:
     include_entities:
        - media_player.family_room_ump
        - media_player.master_bedroom_ump
        - media_player.monoprice_kitchen
        - switch.kitchen_tv_audio
        - switch.kitchen_sonos
        - switch.deck_tv_audio
        - switch.deck_sonos
        - light.kids_room_lights
        - light.living_room_lights
        - light.basement_lights
    entity_config:
      media_player.family_room_ump:
        name: Family Room TV
        description: Family Room TV and Sound
      media_player.master_bedroom_ump:
        name: Master Bedroom TV
        description: Master Bedroom TV and Sound
      media_player.monoprice_kitchen:
        name: Kitchen Speakers
        description: Kitchen Monoprice Speakers
      switch.kitchen_tv_audio:
        name: Kitchen TV Audio
      switch.kitchen_sonos:
        name: Kitchen Sonos
        description: Kitchen Sonos
      switch.deck_tv_audio:
        name: Deck TV Audio
      switch.deck_sonos:
        name: Deck Sonos
        description: Deck Sonos
      light.kids_room_lights:
        name: Kids Room Lights
        description: Kids Room Lights
      light.living_room_lights:
        name: Living Room Lights
        description: Living Room Lights
      light.basement_lights:
        name: Basement Lights
        description: Basement Lights

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
shell_command: !include shell_commands.yaml
#sensor: !include sensors.yaml
